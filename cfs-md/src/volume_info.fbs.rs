// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum VolumeInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VolumeInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VolumeInfo<'a> {
  type Inner = VolumeInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VolumeInfo<'a> {
  pub const VT_NAMES: flatbuffers::VOffsetT = 4;
  pub const VT_VERSIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VolumeInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VolumeInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<VolumeInfo<'bldr>> {
    let mut builder = VolumeInfoBuilder::new(_fbb);
    if let Some(x) = args.versions { builder.add_versions(x); }
    if let Some(x) = args.names { builder.add_names(x); }
    builder.finish()
  }


  #[inline]
  pub fn names(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(VolumeInfo::VT_NAMES, None)}
  }
  #[inline]
  pub fn versions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(VolumeInfo::VT_VERSIONS, None)}
  }
}

impl flatbuffers::Verifiable for VolumeInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("names", Self::VT_NAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("versions", Self::VT_VERSIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct VolumeInfoArgs<'a> {
    pub names: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub versions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for VolumeInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    VolumeInfoArgs {
      names: None,
      versions: None,
    }
  }
}

pub struct VolumeInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VolumeInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_names(&mut self, names: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeInfo::VT_NAMES, names);
  }
  #[inline]
  pub fn add_versions(&mut self, versions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeInfo::VT_VERSIONS, versions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VolumeInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VolumeInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VolumeInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VolumeInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VolumeInfo");
      ds.field("names", &self.names());
      ds.field("versions", &self.versions());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `VolumeInfo`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_info_unchecked`.
pub fn root_as_volume_info(buf: &[u8]) -> Result<VolumeInfo, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<VolumeInfo>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `VolumeInfo` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_volume_info_unchecked`.
pub fn size_prefixed_root_as_volume_info(buf: &[u8]) -> Result<VolumeInfo, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<VolumeInfo>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `VolumeInfo` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_info_unchecked`.
pub fn root_as_volume_info_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<VolumeInfo<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<VolumeInfo<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `VolumeInfo` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_info_unchecked`.
pub fn size_prefixed_root_as_volume_info_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<VolumeInfo<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<VolumeInfo<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a VolumeInfo and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `VolumeInfo`.
pub unsafe fn root_as_volume_info_unchecked(buf: &[u8]) -> VolumeInfo {
  flatbuffers::root_unchecked::<VolumeInfo>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed VolumeInfo and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `VolumeInfo`.
pub unsafe fn size_prefixed_root_as_volume_info_unchecked(buf: &[u8]) -> VolumeInfo {
  flatbuffers::size_prefixed_root_unchecked::<VolumeInfo>(buf)
}
#[inline]
pub fn finish_volume_info_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<VolumeInfo<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_volume_info_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<VolumeInfo<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
