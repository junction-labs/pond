// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum VolumeRootOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VolumeRoot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VolumeRoot<'a> {
  type Inner = VolumeRoot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> VolumeRoot<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_VERSION: flatbuffers::VOffsetT = 6;
  pub const VT_S3_URL: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VolumeRoot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VolumeRootArgs<'args>
  ) -> flatbuffers::WIPOffset<VolumeRoot<'bldr>> {
    let mut builder = VolumeRootBuilder::new(_fbb);
    if let Some(x) = args.s3_url { builder.add_s3_url(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VolumeRoot::VT_NAME, None)}
  }
  #[inline]
  pub fn version(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VolumeRoot::VT_VERSION, None)}
  }
  #[inline]
  pub fn s3_url(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VolumeRoot::VT_S3_URL, None)}
  }
}

impl flatbuffers::Verifiable for VolumeRoot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("s3_url", Self::VT_S3_URL, false)?
     .finish();
    Ok(())
  }
}
pub struct VolumeRootArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub s3_url: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for VolumeRootArgs<'a> {
  #[inline]
  fn default() -> Self {
    VolumeRootArgs {
      name: None,
      version: None,
      s3_url: None,
    }
  }
}

pub struct VolumeRootBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VolumeRootBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeRoot::VT_NAME, name);
  }
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeRoot::VT_VERSION, version);
  }
  #[inline]
  pub fn add_s3_url(&mut self, s3_url: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeRoot::VT_S3_URL, s3_url);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VolumeRootBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VolumeRootBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VolumeRoot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VolumeRoot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VolumeRoot");
      ds.field("name", &self.name());
      ds.field("version", &self.version());
      ds.field("s3_url", &self.s3_url());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `VolumeRoot`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_root_unchecked`.
pub fn root_as_volume_root(buf: &[u8]) -> Result<VolumeRoot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<VolumeRoot>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `VolumeRoot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_volume_root_unchecked`.
pub fn size_prefixed_root_as_volume_root(buf: &[u8]) -> Result<VolumeRoot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<VolumeRoot>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `VolumeRoot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_root_unchecked`.
pub fn root_as_volume_root_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<VolumeRoot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<VolumeRoot<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `VolumeRoot` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_volume_root_unchecked`.
pub fn size_prefixed_root_as_volume_root_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<VolumeRoot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<VolumeRoot<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a VolumeRoot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `VolumeRoot`.
pub unsafe fn root_as_volume_root_unchecked(buf: &[u8]) -> VolumeRoot {
  unsafe { flatbuffers::root_unchecked::<VolumeRoot>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed VolumeRoot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `VolumeRoot`.
pub unsafe fn size_prefixed_root_as_volume_root_unchecked(buf: &[u8]) -> VolumeRoot {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<VolumeRoot>(buf) }
}
#[inline]
pub fn finish_volume_root_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<VolumeRoot<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_volume_root_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<VolumeRoot<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
