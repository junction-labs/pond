// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
  type Inner = Entry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Entry<'a> {
  pub const VT_INO: flatbuffers::VOffsetT = 4;
  pub const VT_PAGENO: flatbuffers::VOffsetT = 6;
  pub const VT_PAGE_SIZE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Entry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EntryArgs
  ) -> flatbuffers::WIPOffset<Entry<'bldr>> {
    let mut builder = EntryBuilder::new(_fbb);
    builder.add_page_size(args.page_size);
    builder.add_ino(args.ino);
    builder.add_pageno(args.pageno);
    builder.finish()
  }


  #[inline]
  pub fn ino(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entry::VT_INO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pageno(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Entry::VT_PAGENO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn page_size(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entry::VT_PAGE_SIZE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Entry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("ino", Self::VT_INO, false)?
     .visit_field::<u16>("pageno", Self::VT_PAGENO, false)?
     .visit_field::<u64>("page_size", Self::VT_PAGE_SIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct EntryArgs {
    pub ino: u64,
    pub pageno: u16,
    pub page_size: u64,
}
impl<'a> Default for EntryArgs {
  #[inline]
  fn default() -> Self {
    EntryArgs {
      ino: 0,
      pageno: 0,
      page_size: 0,
    }
  }
}

pub struct EntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EntryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ino(&mut self, ino: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_INO, ino, 0);
  }
  #[inline]
  pub fn add_pageno(&mut self, pageno: u16) {
    self.fbb_.push_slot::<u16>(Entry::VT_PAGENO, pageno, 0);
  }
  #[inline]
  pub fn add_page_size(&mut self, page_size: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_PAGE_SIZE, page_size, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EntryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Entry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Entry");
      ds.field("ino", &self.ino());
      ds.field("pageno", &self.pageno());
      ds.field("page_size", &self.page_size());
      ds.finish()
  }
}
pub enum IndexOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Index<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Index<'a> {
  type Inner = Index<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Index<'a> {
  pub const VT_ENTRIES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Index { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IndexArgs<'args>
  ) -> flatbuffers::WIPOffset<Index<'bldr>> {
    let mut builder = IndexBuilder::new(_fbb);
    if let Some(x) = args.entries { builder.add_entries(x); }
    builder.finish()
  }


  #[inline]
  pub fn entries(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry>>>>(Index::VT_ENTRIES, None)}
  }
}

impl flatbuffers::Verifiable for Index<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entry>>>>("entries", Self::VT_ENTRIES, false)?
     .finish();
    Ok(())
  }
}
pub struct IndexArgs<'a> {
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entry<'a>>>>>,
}
impl<'a> Default for IndexArgs<'a> {
  #[inline]
  fn default() -> Self {
    IndexArgs {
      entries: None,
    }
  }
}

pub struct IndexBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IndexBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Index::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IndexBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IndexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Index<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Index<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Index");
      ds.field("entries", &self.entries());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Index`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn root_as_index(buf: &[u8]) -> Result<Index, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Index>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Index` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_index_unchecked`.
pub fn size_prefixed_root_as_index(buf: &[u8]) -> Result<Index, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Index>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Index` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn root_as_index_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Index<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Index<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Index` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_index_unchecked`.
pub fn size_prefixed_root_as_index_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Index<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Index<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Index and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Index`.
pub unsafe fn root_as_index_unchecked(buf: &[u8]) -> Index {
  flatbuffers::root_unchecked::<Index>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Index and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Index`.
pub unsafe fn size_prefixed_root_as_index_unchecked(buf: &[u8]) -> Index {
  flatbuffers::size_prefixed_root_unchecked::<Index>(buf)
}
#[inline]
pub fn finish_index_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Index<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_index_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Index<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
