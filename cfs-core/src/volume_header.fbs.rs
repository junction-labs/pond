// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum HeaderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Header<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Header<'a> {
  type Inner = Header<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: unsafe { flatbuffers::Table::new(buf, loc) } }
  }
}

impl<'a> Header<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_DIRENT_INDEX_OFFSET: flatbuffers::VOffsetT = 6;
  pub const VT_DIRENT_INDEX_SIZE: flatbuffers::VOffsetT = 8;
  pub const VT_DIRENT_PAGES_OFFSET: flatbuffers::VOffsetT = 10;
  pub const VT_DIRENT_PAGES_SIZE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Header { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HeaderArgs<'args>
  ) -> flatbuffers::WIPOffset<Header<'bldr>> {
    let mut builder = HeaderBuilder::new(_fbb);
    builder.add_dirent_pages_size(args.dirent_pages_size);
    builder.add_dirent_pages_offset(args.dirent_pages_offset);
    builder.add_dirent_index_size(args.dirent_index_size);
    builder.add_dirent_index_offset(args.dirent_index_offset);
    if let Some(x) = args.version { builder.add_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Header::VT_VERSION, None).unwrap()}
  }
  #[inline]
  pub fn dirent_index_offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Header::VT_DIRENT_INDEX_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dirent_index_size(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Header::VT_DIRENT_INDEX_SIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dirent_pages_offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Header::VT_DIRENT_PAGES_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dirent_pages_size(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Header::VT_DIRENT_PAGES_SIZE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Header<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("version", Self::VT_VERSION, true)?
     .visit_field::<u64>("dirent_index_offset", Self::VT_DIRENT_INDEX_OFFSET, false)?
     .visit_field::<u64>("dirent_index_size", Self::VT_DIRENT_INDEX_SIZE, false)?
     .visit_field::<u64>("dirent_pages_offset", Self::VT_DIRENT_PAGES_OFFSET, false)?
     .visit_field::<u64>("dirent_pages_size", Self::VT_DIRENT_PAGES_SIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct HeaderArgs<'a> {
    pub version: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub dirent_index_offset: u64,
    pub dirent_index_size: u64,
    pub dirent_pages_offset: u64,
    pub dirent_pages_size: u64,
}
impl<'a> Default for HeaderArgs<'a> {
  #[inline]
  fn default() -> Self {
    HeaderArgs {
      version: None, // required field
      dirent_index_offset: 0,
      dirent_index_size: 0,
      dirent_pages_offset: 0,
      dirent_pages_size: 0,
    }
  }
}

pub struct HeaderBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HeaderBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Header::VT_VERSION, version);
  }
  #[inline]
  pub fn add_dirent_index_offset(&mut self, dirent_index_offset: u64) {
    self.fbb_.push_slot::<u64>(Header::VT_DIRENT_INDEX_OFFSET, dirent_index_offset, 0);
  }
  #[inline]
  pub fn add_dirent_index_size(&mut self, dirent_index_size: u64) {
    self.fbb_.push_slot::<u64>(Header::VT_DIRENT_INDEX_SIZE, dirent_index_size, 0);
  }
  #[inline]
  pub fn add_dirent_pages_offset(&mut self, dirent_pages_offset: u64) {
    self.fbb_.push_slot::<u64>(Header::VT_DIRENT_PAGES_OFFSET, dirent_pages_offset, 0);
  }
  #[inline]
  pub fn add_dirent_pages_size(&mut self, dirent_pages_size: u64) {
    self.fbb_.push_slot::<u64>(Header::VT_DIRENT_PAGES_SIZE, dirent_pages_size, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HeaderBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HeaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Header<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Header::VT_VERSION,"version");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Header<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Header");
      ds.field("version", &self.version());
      ds.field("dirent_index_offset", &self.dirent_index_offset());
      ds.field("dirent_index_size", &self.dirent_index_size());
      ds.field("dirent_pages_offset", &self.dirent_pages_offset());
      ds.field("dirent_pages_size", &self.dirent_pages_size());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Header`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_header_unchecked`.
pub fn root_as_header(buf: &[u8]) -> Result<Header, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Header>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Header` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_header_unchecked`.
pub fn size_prefixed_root_as_header(buf: &[u8]) -> Result<Header, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Header>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Header` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_header_unchecked`.
pub fn root_as_header_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Header<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Header<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Header` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_header_unchecked`.
pub fn size_prefixed_root_as_header_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Header<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Header<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Header and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Header`.
pub unsafe fn root_as_header_unchecked(buf: &[u8]) -> Header {
  unsafe { flatbuffers::root_unchecked::<Header>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Header and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Header`.
pub unsafe fn size_prefixed_root_as_header_unchecked(buf: &[u8]) -> Header {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Header>(buf) }
}
#[inline]
pub fn finish_header_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Header<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_header_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Header<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
