enum FileType : byte {
  Regular,
  Directory,
  Symlink,
  // no support for block device, char device, fifo, socket
}

struct Timespec {
  // seconds since epoch
  sec: ulong;
  // nanoseconds
  nsec: uint;
}

// A DirEntry contains all applicable fields from fuser::FileAttr.
// https://docs.rs/fuser/latest/fuser/struct.FileAttr.html
table DirEntry {
  // inode number, must be unique
  ino: ulong (key);

  // inode number of the parent
  parent_ino: ulong;

  // file size in bytes
  size: ulong;

  // number of 512B blocks
  blocks: ulong;

  // last time this DirEntry was read
  atime: Timespec (required);

  // last time the contents of this DirEntry was modified
  mtime: Timespec (required);

  // last time metadata of this DirEntry was changed
  ctime: Timespec (required);

  // type of file, e.g. Regular file, Directory, Symlink
  kind: FileType;

  // u16 permission bits
  perm: ushort;

  // number of hard links
  nlink: uint;

  // user id
  uid: uint;

  // group id
  gid: uint;

  // device id
  rdev: uint;

  // file/directory name
  name: string (required);

  // byte offset into the file section of the volume that tells us where this
  // dirent starts
  s3_offset: ulong;

  // size of file data (in bytes) in S3 object
  s3_size: ulong;
}

table DirEntryPage {
  dirents: [DirEntry] (required);
}

root_type DirEntryPage;
